/*
Copyright 2022 The Katalyst Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ // Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference_svc.proto

package inferencesvc

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InferenceType int32

const (
	InferenceType_ClassificationOverload  InferenceType = 0
	InferenceType_ClassificationUnderload InferenceType = 1
	InferenceType_LatencyRegression       InferenceType = 2
	InferenceType_Other                   InferenceType = 15
)

var InferenceType_name = map[int32]string{
	0:  "ClassificationOverload",
	1:  "ClassificationUnderload",
	2:  "LatencyRegression",
	15: "Other",
}

var InferenceType_value = map[string]int32{
	"ClassificationOverload":  0,
	"ClassificationUnderload": 1,
	"LatencyRegression":       2,
	"Other":                   15,
}

func (x InferenceType) String() string {
	return proto.EnumName(InferenceType_name, int32(x))
}

func (InferenceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_96721cf42274ca03, []int{0}
}

type ResultFlag int32

const (
	ResultFlag_ResultFlagValid   ResultFlag = 0
	ResultFlag_ResultFlagInvalid ResultFlag = 1
	ResultFlag_ResultFlagSkip    ResultFlag = 2
)

var ResultFlag_name = map[int32]string{
	0: "ResultFlagValid",
	1: "ResultFlagInvalid",
	2: "ResultFlagSkip",
}

var ResultFlag_value = map[string]int32{
	"ResultFlagValid":   0,
	"ResultFlagInvalid": 1,
	"ResultFlagSkip":    2,
}

func (x ResultFlag) String() string {
	return proto.EnumName(ResultFlag_name, int32(x))
}

func (ResultFlag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_96721cf42274ca03, []int{1}
}

type InferenceRequest struct {
	FeatureNames         []string                            `protobuf:"bytes,1,rep,name=feature_names,json=featureNames,proto3" json:"feature_names,omitempty"`
	PodRequestEntries    map[string]*ContainerRequestEntries `protobuf:"bytes,2,rep,name=pod_request_entries,json=podRequestEntries,proto3" json:"pod_request_entries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *InferenceRequest) Reset()      { *m = InferenceRequest{} }
func (*InferenceRequest) ProtoMessage() {}
func (*InferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_96721cf42274ca03, []int{0}
}
func (m *InferenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InferenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferenceRequest.Merge(m, src)
}
func (m *InferenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *InferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InferenceRequest proto.InternalMessageInfo

func (m *InferenceRequest) GetFeatureNames() []string {
	if m != nil {
		return m.FeatureNames
	}
	return nil
}

func (m *InferenceRequest) GetPodRequestEntries() map[string]*ContainerRequestEntries {
	if m != nil {
		return m.PodRequestEntries
	}
	return nil
}

type ContainerRequestEntries struct {
	ContainerFeatureValues map[string]*FeatureValues `protobuf:"bytes,1,rep,name=container_feature_values,json=containerFeatureValues,proto3" json:"container_feature_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral   struct{}                  `json:"-"`
	XXX_sizecache          int32                     `json:"-"`
}

func (m *ContainerRequestEntries) Reset()      { *m = ContainerRequestEntries{} }
func (*ContainerRequestEntries) ProtoMessage() {}
func (*ContainerRequestEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_96721cf42274ca03, []int{1}
}
func (m *ContainerRequestEntries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerRequestEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerRequestEntries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerRequestEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerRequestEntries.Merge(m, src)
}
func (m *ContainerRequestEntries) XXX_Size() int {
	return m.Size()
}
func (m *ContainerRequestEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerRequestEntries.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerRequestEntries proto.InternalMessageInfo

func (m *ContainerRequestEntries) GetContainerFeatureValues() map[string]*FeatureValues {
	if m != nil {
		return m.ContainerFeatureValues
	}
	return nil
}

type FeatureValues struct {
	Values               []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureValues) Reset()      { *m = FeatureValues{} }
func (*FeatureValues) ProtoMessage() {}
func (*FeatureValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_96721cf42274ca03, []int{2}
}
func (m *FeatureValues) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeatureValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeatureValues.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeatureValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureValues.Merge(m, src)
}
func (m *FeatureValues) XXX_Size() int {
	return m.Size()
}
func (m *FeatureValues) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureValues.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureValues proto.InternalMessageInfo

func (m *FeatureValues) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type InferenceResponse struct {
	PodResponseEntries   map[string]*ContainerResponseEntries `protobuf:"bytes,1,rep,name=pod_response_entries,json=podResponseEntries,proto3" json:"pod_response_entries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *InferenceResponse) Reset()      { *m = InferenceResponse{} }
func (*InferenceResponse) ProtoMessage() {}
func (*InferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_96721cf42274ca03, []int{3}
}
func (m *InferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferenceResponse.Merge(m, src)
}
func (m *InferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *InferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InferenceResponse proto.InternalMessageInfo

func (m *InferenceResponse) GetPodResponseEntries() map[string]*ContainerResponseEntries {
	if m != nil {
		return m.PodResponseEntries
	}
	return nil
}

type ContainerResponseEntries struct {
	ContainerInferenceResults map[string]*InferenceResults `protobuf:"bytes,1,rep,name=container_inference_results,json=containerInferenceResults,proto3" json:"container_inference_results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral      struct{}                     `json:"-"`
	XXX_sizecache             int32                        `json:"-"`
}

func (m *ContainerResponseEntries) Reset()      { *m = ContainerResponseEntries{} }
func (*ContainerResponseEntries) ProtoMessage() {}
func (*ContainerResponseEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_96721cf42274ca03, []int{4}
}
func (m *ContainerResponseEntries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerResponseEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerResponseEntries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerResponseEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerResponseEntries.Merge(m, src)
}
func (m *ContainerResponseEntries) XXX_Size() int {
	return m.Size()
}
func (m *ContainerResponseEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerResponseEntries.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerResponseEntries proto.InternalMessageInfo

func (m *ContainerResponseEntries) GetContainerInferenceResults() map[string]*InferenceResults {
	if m != nil {
		return m.ContainerInferenceResults
	}
	return nil
}

type InferenceResults struct {
	InferenceResults     []*InferenceResult `protobuf:"bytes,1,rep,name=inference_results,json=inferenceResults,proto3" json:"inference_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *InferenceResults) Reset()      { *m = InferenceResults{} }
func (*InferenceResults) ProtoMessage() {}
func (*InferenceResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_96721cf42274ca03, []int{5}
}
func (m *InferenceResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InferenceResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InferenceResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InferenceResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferenceResults.Merge(m, src)
}
func (m *InferenceResults) XXX_Size() int {
	return m.Size()
}
func (m *InferenceResults) XXX_DiscardUnknown() {
	xxx_messageInfo_InferenceResults.DiscardUnknown(m)
}

var xxx_messageInfo_InferenceResults proto.InternalMessageInfo

func (m *InferenceResults) GetInferenceResults() []*InferenceResult {
	if m != nil {
		return m.InferenceResults
	}
	return nil
}

type InferenceResult struct {
	// if use default model. default model should be trained using all service data for fallback.
	IsDefault     bool          `protobuf:"varint,1,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	InferenceType InferenceType `protobuf:"varint,2,opt,name=inference_type,json=inferenceType,proto3,enum=inferencesvc.InferenceType" json:"inference_type,omitempty"`
	// Inference output, values are varied by inference target.
	// For classification, the output would be range from 0 to 1.
	// For regression, the output would be the predicted value.
	// It depends on the inference target.
	Output float32 `protobuf:"fixed32,3,opt,name=output,proto3" json:"output,omitempty"`
	// threshold to judge overload or underload. should be float between 0 and 1.
	Percentile float32 `protobuf:"fixed32,4,opt,name=percentile,proto3" json:"percentile,omitempty"`
	// model_version to identify where does the output come from.
	ModelVersion string `protobuf:"bytes,5,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	// generic_output provides specific inference result from corresponding model,
	// it will be decoded by the specific client accesses the model.
	GenericOutput string `protobuf:"bytes,6,opt,name=generic_output,json=genericOutput,proto3" json:"generic_output,omitempty"`
	// since every entry in request should have a corresponding entry in resp,
	// but not all entries need to be inferred.
	// so we use result_flag to identify if this entry in resp should be handled.
	ResultFlag           ResultFlag `protobuf:"varint,7,opt,name=result_flag,json=resultFlag,proto3,enum=inferencesvc.ResultFlag" json:"result_flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *InferenceResult) Reset()      { *m = InferenceResult{} }
func (*InferenceResult) ProtoMessage() {}
func (*InferenceResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_96721cf42274ca03, []int{6}
}
func (m *InferenceResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InferenceResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InferenceResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InferenceResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferenceResult.Merge(m, src)
}
func (m *InferenceResult) XXX_Size() int {
	return m.Size()
}
func (m *InferenceResult) XXX_DiscardUnknown() {
	xxx_messageInfo_InferenceResult.DiscardUnknown(m)
}

var xxx_messageInfo_InferenceResult proto.InternalMessageInfo

func (m *InferenceResult) GetIsDefault() bool {
	if m != nil {
		return m.IsDefault
	}
	return false
}

func (m *InferenceResult) GetInferenceType() InferenceType {
	if m != nil {
		return m.InferenceType
	}
	return InferenceType_ClassificationOverload
}

func (m *InferenceResult) GetOutput() float32 {
	if m != nil {
		return m.Output
	}
	return 0
}

func (m *InferenceResult) GetPercentile() float32 {
	if m != nil {
		return m.Percentile
	}
	return 0
}

func (m *InferenceResult) GetModelVersion() string {
	if m != nil {
		return m.ModelVersion
	}
	return ""
}

func (m *InferenceResult) GetGenericOutput() string {
	if m != nil {
		return m.GenericOutput
	}
	return ""
}

func (m *InferenceResult) GetResultFlag() ResultFlag {
	if m != nil {
		return m.ResultFlag
	}
	return ResultFlag_ResultFlagValid
}

func init() {
	proto.RegisterEnum("inferencesvc.InferenceType", InferenceType_name, InferenceType_value)
	proto.RegisterEnum("inferencesvc.ResultFlag", ResultFlag_name, ResultFlag_value)
	proto.RegisterType((*InferenceRequest)(nil), "inferencesvc.InferenceRequest")
	proto.RegisterMapType((map[string]*ContainerRequestEntries)(nil), "inferencesvc.InferenceRequest.PodRequestEntriesEntry")
	proto.RegisterType((*ContainerRequestEntries)(nil), "inferencesvc.ContainerRequestEntries")
	proto.RegisterMapType((map[string]*FeatureValues)(nil), "inferencesvc.ContainerRequestEntries.ContainerFeatureValuesEntry")
	proto.RegisterType((*FeatureValues)(nil), "inferencesvc.FeatureValues")
	proto.RegisterType((*InferenceResponse)(nil), "inferencesvc.InferenceResponse")
	proto.RegisterMapType((map[string]*ContainerResponseEntries)(nil), "inferencesvc.InferenceResponse.PodResponseEntriesEntry")
	proto.RegisterType((*ContainerResponseEntries)(nil), "inferencesvc.ContainerResponseEntries")
	proto.RegisterMapType((map[string]*InferenceResults)(nil), "inferencesvc.ContainerResponseEntries.ContainerInferenceResultsEntry")
	proto.RegisterType((*InferenceResults)(nil), "inferencesvc.InferenceResults")
	proto.RegisterType((*InferenceResult)(nil), "inferencesvc.InferenceResult")
}

func init() { proto.RegisterFile("inference_svc.proto", fileDescriptor_96721cf42274ca03) }

var fileDescriptor_96721cf42274ca03 = []byte{
	// 822 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x4f, 0x73, 0xdb, 0x44,
	0x14, 0xcf, 0x2a, 0x24, 0xe0, 0x97, 0x38, 0xb1, 0x37, 0x34, 0x11, 0xce, 0x54, 0x78, 0xcc, 0x14,
	0x3c, 0x9d, 0xa9, 0x35, 0x04, 0x18, 0xfe, 0x5e, 0x68, 0x69, 0x67, 0xca, 0x74, 0x1a, 0x46, 0x85,
	0x1c, 0x38, 0xa0, 0x59, 0xcb, 0xcf, 0xca, 0x62, 0x45, 0x2b, 0x76, 0x57, 0xea, 0x78, 0xb8, 0xc0,
	0x81, 0x13, 0x97, 0x7e, 0x17, 0xbe, 0x44, 0x8f, 0x1c, 0x39, 0xd2, 0x70, 0xe6, 0x2b, 0x30, 0x8c,
	0xb4, 0x8e, 0x25, 0x19, 0x2b, 0xf4, 0xe4, 0xf7, 0x7e, 0xef, 0xbd, 0xdf, 0xdb, 0xf7, 0xdb, 0x67,
	0x2d, 0x1c, 0xf0, 0x78, 0x8a, 0x12, 0xe3, 0x00, 0x7d, 0x95, 0x05, 0xa3, 0x44, 0x0a, 0x2d, 0xe8,
	0xee, 0x12, 0x54, 0x59, 0xd0, 0xbb, 0x13, 0x72, 0x7d, 0x9e, 0x8e, 0x47, 0x81, 0xb8, 0x70, 0x43,
	0x11, 0x0a, 0xb7, 0x48, 0x1a, 0xa7, 0xd3, 0xc2, 0x2b, 0x9c, 0xc2, 0x32, 0xc5, 0x83, 0x5f, 0x2d,
	0xe8, 0x3c, 0xbc, 0xaa, 0xf7, 0xf0, 0x87, 0x14, 0x95, 0xa6, 0x6f, 0x41, 0x7b, 0x8a, 0x4c, 0xa7,
	0x12, 0xfd, 0x98, 0x5d, 0xa0, 0xb2, 0x49, 0x7f, 0x73, 0xd8, 0xf2, 0x76, 0x17, 0xe0, 0xe3, 0x1c,
	0xa3, 0x08, 0x07, 0x89, 0x98, 0xf8, 0xd2, 0xd4, 0xf8, 0x18, 0x6b, 0xc9, 0x51, 0xd9, 0x56, 0x7f,
	0x73, 0xb8, 0x73, 0xf2, 0xc1, 0xa8, 0x7a, 0xa8, 0xd1, 0x6a, 0x87, 0xd1, 0x57, 0x62, 0xb2, 0x30,
	0xef, 0x9b, 0xba, 0xfc, 0x67, 0xee, 0x75, 0x93, 0x55, 0xbc, 0x37, 0x83, 0xc3, 0xf5, 0xc9, 0xb4,
	0x03, 0x9b, 0x33, 0x9c, 0xdb, 0xa4, 0x4f, 0x86, 0x2d, 0x2f, 0x37, 0xe9, 0xa7, 0xb0, 0x95, 0xb1,
	0x28, 0x45, 0xdb, 0xea, 0x93, 0xe1, 0xce, 0xc9, 0xad, 0xfa, 0x21, 0xee, 0x89, 0x58, 0x33, 0x1e,
	0xa3, 0xac, 0x93, 0x79, 0xa6, 0xe6, 0x13, 0xeb, 0x23, 0x32, 0xf8, 0x87, 0xc0, 0x51, 0x43, 0x1a,
	0xfd, 0x11, 0xec, 0xe0, 0x2a, 0xe4, 0x5f, 0xc9, 0x53, 0x94, 0x1a, 0x7d, 0x76, 0x4e, 0x3e, 0x7f,
	0xa9, 0x7e, 0x25, 0xfe, 0xc0, 0x90, 0x9c, 0x15, 0x1c, 0x46, 0x80, 0xc3, 0x60, 0x6d, 0xb0, 0x37,
	0x85, 0xe3, 0x6b, 0xca, 0xd6, 0x48, 0xf1, 0x6e, 0x5d, 0x8a, 0xe3, 0xfa, 0xd1, 0x6a, 0x14, 0x55,
	0x01, 0xde, 0x81, 0x76, 0x2d, 0x46, 0x0f, 0x61, 0xbb, 0x32, 0x63, 0xcb, 0x5b, 0x78, 0x83, 0xbf,
	0x09, 0x74, 0x2b, 0xb7, 0xaa, 0x12, 0x11, 0x2b, 0xa4, 0x1c, 0x5e, 0x37, 0x3b, 0x61, 0xfc, 0xe5,
	0x52, 0x18, 0x7d, 0x3e, 0x6c, 0x5c, 0x0a, 0x93, 0x6e, 0xb6, 0xc2, 0xd8, 0xb5, 0xb5, 0xa0, 0xc9,
	0x7f, 0x02, 0xbd, 0x0b, 0x38, 0x6a, 0x48, 0x5f, 0xa3, 0xc6, 0x67, 0x75, 0x35, 0xde, 0x6e, 0xbc,
	0xa8, 0x1a, 0x5b, 0x55, 0x98, 0x67, 0x16, 0xd8, 0x4d, 0x79, 0xf4, 0x17, 0x02, 0xc7, 0xe5, 0x6e,
	0x94, 0xff, 0x51, 0x89, 0x2a, 0x8d, 0xf4, 0xd5, 0xf8, 0xf7, 0x5f, 0xae, 0x6b, 0x19, 0xa8, 0x0a,
	0x94, 0xf3, 0x18, 0x31, 0xde, 0x08, 0x9a, 0xe2, 0xbd, 0x08, 0x9c, 0xeb, 0x8b, 0xd7, 0x48, 0xf3,
	0x7e, 0x5d, 0x1a, 0xa7, 0xf9, 0x8e, 0x72, 0x96, 0xaa, 0x24, 0xdf, 0xd5, 0xbe, 0x1c, 0x45, 0x98,
	0x7e, 0x09, 0xdd, 0xa6, 0xf1, 0x6f, 0x5e, 0xcb, 0xec, 0x75, 0xf8, 0x0a, 0xd7, 0xe0, 0x37, 0x0b,
	0xf6, 0x57, 0xb2, 0xe8, 0x4d, 0x00, 0xae, 0xfc, 0x09, 0x4e, 0x59, 0x1a, 0xe9, 0x62, 0x8c, 0xd7,
	0xbc, 0x16, 0x57, 0x5f, 0x18, 0x80, 0xde, 0x85, 0xbd, 0xb2, 0xbd, 0x9e, 0x27, 0x66, 0xaa, 0xbd,
	0xd5, 0xf5, 0x5f, 0xb2, 0x7e, 0x3d, 0x4f, 0xd0, 0x6b, 0xf3, 0xaa, 0x9b, 0x6f, 0xbc, 0x48, 0x75,
	0x92, 0x6a, 0x7b, 0xb3, 0x4f, 0x86, 0x96, 0xb7, 0xf0, 0xa8, 0x03, 0x90, 0xa0, 0x0c, 0x30, 0xd6,
	0x3c, 0x42, 0xfb, 0x95, 0x22, 0x56, 0x41, 0xf2, 0x8f, 0xe6, 0x85, 0x98, 0x60, 0xe4, 0x67, 0x28,
	0x15, 0x17, 0xb1, 0xbd, 0x55, 0x88, 0xbc, 0x5b, 0x80, 0x67, 0x06, 0xa3, 0xb7, 0x60, 0x2f, 0xc4,
	0x18, 0x25, 0x0f, 0xfc, 0x45, 0x93, 0xed, 0x22, 0xab, 0xbd, 0x40, 0x4f, 0x4d, 0xaf, 0x8f, 0x61,
	0xc7, 0x88, 0xe7, 0x4f, 0x23, 0x16, 0xda, 0xaf, 0x16, 0x43, 0xd8, 0xf5, 0x21, 0x8c, 0x22, 0x0f,
	0x22, 0x16, 0x7a, 0x20, 0x97, 0xf6, 0xed, 0xef, 0xa1, 0x5d, 0x1b, 0x8f, 0xf6, 0xe0, 0xf0, 0x5e,
	0xc4, 0x94, 0xe2, 0x53, 0x1e, 0x30, 0xcd, 0x45, 0x7c, 0x9a, 0xa1, 0x8c, 0x04, 0x9b, 0x74, 0x36,
	0xe8, 0x31, 0x1c, 0xd5, 0x63, 0xdf, 0xc4, 0x93, 0x45, 0x90, 0xd0, 0x1b, 0xd0, 0x7d, 0xc4, 0x34,
	0xc6, 0xc1, 0xdc, 0xc3, 0x50, 0xa2, 0xca, 0x07, 0xe8, 0x58, 0xb4, 0x05, 0x5b, 0xa7, 0xfa, 0x1c,
	0x65, 0x67, 0xff, 0xf6, 0x23, 0x80, 0xf2, 0x14, 0xf4, 0x00, 0xf6, 0x4b, 0xef, 0x8c, 0x45, 0x3c,
	0xef, 0x70, 0x03, 0xba, 0x25, 0xf8, 0x30, 0xce, 0x0a, 0x98, 0x50, 0x0a, 0x7b, 0x25, 0xfc, 0x64,
	0xc6, 0x93, 0x8e, 0x75, 0x32, 0xae, 0xec, 0xd3, 0x13, 0x94, 0x19, 0x0f, 0x90, 0x3e, 0x86, 0xd6,
	0x12, 0xa3, 0xce, 0xf5, 0x8f, 0x4a, 0xef, 0xcd, 0xff, 0xf9, 0xbe, 0x0c, 0x36, 0xee, 0xfe, 0x4c,
	0x9e, 0xbf, 0x70, 0xc8, 0x1f, 0x2f, 0x9c, 0x8d, 0x9f, 0x2e, 0x1d, 0xf2, 0xfc, 0xd2, 0x21, 0xbf,
	0x5f, 0x3a, 0xe4, 0xcf, 0x4b, 0x87, 0x3c, 0xfb, 0xcb, 0xd9, 0xf8, 0x36, 0xa8, 0x3c, 0x9e, 0xb3,
	0x74, 0x8c, 0x4f, 0xcf, 0x99, 0x9c, 0xba, 0x33, 0xa6, 0x59, 0x34, 0x57, 0xfa, 0x4e, 0x20, 0x24,
	0xba, 0xc9, 0x2c, 0x74, 0x59, 0x88, 0xb1, 0x76, 0xd5, 0x5c, 0xb1, 0x49, 0xc6, 0x95, 0x90, 0x6e,
	0x12, 0xa5, 0x21, 0x8f, 0xdd, 0x65, 0x7f, 0xb7, 0xb8, 0x75, 0xe5, 0x8e, 0xc5, 0x53, 0xac, 0xe2,
	0x2a, 0x0b, 0xc6, 0xdb, 0xc5, 0xcb, 0xfb, 0xde, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x97,
	0xe8, 0x67, 0xcd, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InferenceServiceClient is the client API for InferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InferenceServiceClient interface {
	Inference(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (*InferenceResponse, error)
}

type inferenceServiceClient struct {
	cc *grpc.ClientConn
}

func NewInferenceServiceClient(cc *grpc.ClientConn) InferenceServiceClient {
	return &inferenceServiceClient{cc}
}

func (c *inferenceServiceClient) Inference(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (*InferenceResponse, error) {
	out := new(InferenceResponse)
	err := c.cc.Invoke(ctx, "/inferencesvc.InferenceService/Inference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InferenceServiceServer is the server API for InferenceService service.
type InferenceServiceServer interface {
	Inference(context.Context, *InferenceRequest) (*InferenceResponse, error)
}

// UnimplementedInferenceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInferenceServiceServer struct {
}

func (*UnimplementedInferenceServiceServer) Inference(ctx context.Context, req *InferenceRequest) (*InferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inference not implemented")
}

func RegisterInferenceServiceServer(s *grpc.Server, srv InferenceServiceServer) {
	s.RegisterService(&_InferenceService_serviceDesc, srv)
}

func _InferenceService_Inference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InferenceServiceServer).Inference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inferencesvc.InferenceService/Inference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InferenceServiceServer).Inference(ctx, req.(*InferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InferenceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inferencesvc.InferenceService",
	HandlerType: (*InferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Inference",
			Handler:    _InferenceService_Inference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inference_svc.proto",
}

func (m *InferenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InferenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PodRequestEntries) > 0 {
		for k := range m.PodRequestEntries {
			v := m.PodRequestEntries[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintInferenceSvc(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintInferenceSvc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintInferenceSvc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FeatureNames) > 0 {
		for iNdEx := len(m.FeatureNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FeatureNames[iNdEx])
			copy(dAtA[i:], m.FeatureNames[iNdEx])
			i = encodeVarintInferenceSvc(dAtA, i, uint64(len(m.FeatureNames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContainerRequestEntries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerRequestEntries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerRequestEntries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContainerFeatureValues) > 0 {
		for k := range m.ContainerFeatureValues {
			v := m.ContainerFeatureValues[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintInferenceSvc(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintInferenceSvc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintInferenceSvc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FeatureValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureValues) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeatureValues) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintInferenceSvc(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PodResponseEntries) > 0 {
		for k := range m.PodResponseEntries {
			v := m.PodResponseEntries[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintInferenceSvc(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintInferenceSvc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintInferenceSvc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContainerResponseEntries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerResponseEntries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerResponseEntries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContainerInferenceResults) > 0 {
		for k := range m.ContainerInferenceResults {
			v := m.ContainerInferenceResults[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintInferenceSvc(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintInferenceSvc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintInferenceSvc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InferenceResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferenceResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InferenceResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InferenceResults) > 0 {
		for iNdEx := len(m.InferenceResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InferenceResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInferenceSvc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InferenceResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferenceResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InferenceResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResultFlag != 0 {
		i = encodeVarintInferenceSvc(dAtA, i, uint64(m.ResultFlag))
		i--
		dAtA[i] = 0x38
	}
	if len(m.GenericOutput) > 0 {
		i -= len(m.GenericOutput)
		copy(dAtA[i:], m.GenericOutput)
		i = encodeVarintInferenceSvc(dAtA, i, uint64(len(m.GenericOutput)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ModelVersion) > 0 {
		i -= len(m.ModelVersion)
		copy(dAtA[i:], m.ModelVersion)
		i = encodeVarintInferenceSvc(dAtA, i, uint64(len(m.ModelVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Percentile != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Percentile))))
		i--
		dAtA[i] = 0x25
	}
	if m.Output != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Output))))
		i--
		dAtA[i] = 0x1d
	}
	if m.InferenceType != 0 {
		i = encodeVarintInferenceSvc(dAtA, i, uint64(m.InferenceType))
		i--
		dAtA[i] = 0x10
	}
	if m.IsDefault {
		i--
		if m.IsDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintInferenceSvc(dAtA []byte, offset int, v uint64) int {
	offset -= sovInferenceSvc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InferenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeatureNames) > 0 {
		for _, s := range m.FeatureNames {
			l = len(s)
			n += 1 + l + sovInferenceSvc(uint64(l))
		}
	}
	if len(m.PodRequestEntries) > 0 {
		for k, v := range m.PodRequestEntries {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovInferenceSvc(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovInferenceSvc(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovInferenceSvc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ContainerRequestEntries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContainerFeatureValues) > 0 {
		for k, v := range m.ContainerFeatureValues {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovInferenceSvc(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovInferenceSvc(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovInferenceSvc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FeatureValues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovInferenceSvc(uint64(l))
		}
	}
	return n
}

func (m *InferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PodResponseEntries) > 0 {
		for k, v := range m.PodResponseEntries {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovInferenceSvc(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovInferenceSvc(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovInferenceSvc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ContainerResponseEntries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContainerInferenceResults) > 0 {
		for k, v := range m.ContainerInferenceResults {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovInferenceSvc(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovInferenceSvc(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovInferenceSvc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *InferenceResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InferenceResults) > 0 {
		for _, e := range m.InferenceResults {
			l = e.Size()
			n += 1 + l + sovInferenceSvc(uint64(l))
		}
	}
	return n
}

func (m *InferenceResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsDefault {
		n += 2
	}
	if m.InferenceType != 0 {
		n += 1 + sovInferenceSvc(uint64(m.InferenceType))
	}
	if m.Output != 0 {
		n += 5
	}
	if m.Percentile != 0 {
		n += 5
	}
	l = len(m.ModelVersion)
	if l > 0 {
		n += 1 + l + sovInferenceSvc(uint64(l))
	}
	l = len(m.GenericOutput)
	if l > 0 {
		n += 1 + l + sovInferenceSvc(uint64(l))
	}
	if m.ResultFlag != 0 {
		n += 1 + sovInferenceSvc(uint64(m.ResultFlag))
	}
	return n
}

func sovInferenceSvc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInferenceSvc(x uint64) (n int) {
	return sovInferenceSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *InferenceRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForPodRequestEntries := make([]string, 0, len(this.PodRequestEntries))
	for k, _ := range this.PodRequestEntries {
		keysForPodRequestEntries = append(keysForPodRequestEntries, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPodRequestEntries)
	mapStringForPodRequestEntries := "map[string]*ContainerRequestEntries{"
	for _, k := range keysForPodRequestEntries {
		mapStringForPodRequestEntries += fmt.Sprintf("%v: %v,", k, this.PodRequestEntries[k])
	}
	mapStringForPodRequestEntries += "}"
	s := strings.Join([]string{`&InferenceRequest{`,
		`FeatureNames:` + fmt.Sprintf("%v", this.FeatureNames) + `,`,
		`PodRequestEntries:` + mapStringForPodRequestEntries + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerRequestEntries) String() string {
	if this == nil {
		return "nil"
	}
	keysForContainerFeatureValues := make([]string, 0, len(this.ContainerFeatureValues))
	for k, _ := range this.ContainerFeatureValues {
		keysForContainerFeatureValues = append(keysForContainerFeatureValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainerFeatureValues)
	mapStringForContainerFeatureValues := "map[string]*FeatureValues{"
	for _, k := range keysForContainerFeatureValues {
		mapStringForContainerFeatureValues += fmt.Sprintf("%v: %v,", k, this.ContainerFeatureValues[k])
	}
	mapStringForContainerFeatureValues += "}"
	s := strings.Join([]string{`&ContainerRequestEntries{`,
		`ContainerFeatureValues:` + mapStringForContainerFeatureValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeatureValues) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeatureValues{`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InferenceResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForPodResponseEntries := make([]string, 0, len(this.PodResponseEntries))
	for k, _ := range this.PodResponseEntries {
		keysForPodResponseEntries = append(keysForPodResponseEntries, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPodResponseEntries)
	mapStringForPodResponseEntries := "map[string]*ContainerResponseEntries{"
	for _, k := range keysForPodResponseEntries {
		mapStringForPodResponseEntries += fmt.Sprintf("%v: %v,", k, this.PodResponseEntries[k])
	}
	mapStringForPodResponseEntries += "}"
	s := strings.Join([]string{`&InferenceResponse{`,
		`PodResponseEntries:` + mapStringForPodResponseEntries + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerResponseEntries) String() string {
	if this == nil {
		return "nil"
	}
	keysForContainerInferenceResults := make([]string, 0, len(this.ContainerInferenceResults))
	for k, _ := range this.ContainerInferenceResults {
		keysForContainerInferenceResults = append(keysForContainerInferenceResults, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainerInferenceResults)
	mapStringForContainerInferenceResults := "map[string]*InferenceResults{"
	for _, k := range keysForContainerInferenceResults {
		mapStringForContainerInferenceResults += fmt.Sprintf("%v: %v,", k, this.ContainerInferenceResults[k])
	}
	mapStringForContainerInferenceResults += "}"
	s := strings.Join([]string{`&ContainerResponseEntries{`,
		`ContainerInferenceResults:` + mapStringForContainerInferenceResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *InferenceResults) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInferenceResults := "[]*InferenceResult{"
	for _, f := range this.InferenceResults {
		repeatedStringForInferenceResults += strings.Replace(f.String(), "InferenceResult", "InferenceResult", 1) + ","
	}
	repeatedStringForInferenceResults += "}"
	s := strings.Join([]string{`&InferenceResults{`,
		`InferenceResults:` + repeatedStringForInferenceResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *InferenceResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InferenceResult{`,
		`IsDefault:` + fmt.Sprintf("%v", this.IsDefault) + `,`,
		`InferenceType:` + fmt.Sprintf("%v", this.InferenceType) + `,`,
		`Output:` + fmt.Sprintf("%v", this.Output) + `,`,
		`Percentile:` + fmt.Sprintf("%v", this.Percentile) + `,`,
		`ModelVersion:` + fmt.Sprintf("%v", this.ModelVersion) + `,`,
		`GenericOutput:` + fmt.Sprintf("%v", this.GenericOutput) + `,`,
		`ResultFlag:` + fmt.Sprintf("%v", this.ResultFlag) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringInferenceSvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *InferenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInferenceSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureNames = append(m.FeatureNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodRequestEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodRequestEntries == nil {
				m.PodRequestEntries = make(map[string]*ContainerRequestEntries)
			}
			var mapkey string
			var mapvalue *ContainerRequestEntries
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInferenceSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInferenceSvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInferenceSvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ContainerRequestEntries{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInferenceSvc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PodRequestEntries[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInferenceSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerRequestEntries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInferenceSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerRequestEntries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerRequestEntries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerFeatureValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContainerFeatureValues == nil {
				m.ContainerFeatureValues = make(map[string]*FeatureValues)
			}
			var mapkey string
			var mapvalue *FeatureValues
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInferenceSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInferenceSvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInferenceSvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FeatureValues{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInferenceSvc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ContainerFeatureValues[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInferenceSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInferenceSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInferenceSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInferenceSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodResponseEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodResponseEntries == nil {
				m.PodResponseEntries = make(map[string]*ContainerResponseEntries)
			}
			var mapkey string
			var mapvalue *ContainerResponseEntries
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInferenceSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInferenceSvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInferenceSvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ContainerResponseEntries{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInferenceSvc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PodResponseEntries[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInferenceSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerResponseEntries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInferenceSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerResponseEntries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerResponseEntries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerInferenceResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContainerInferenceResults == nil {
				m.ContainerInferenceResults = make(map[string]*InferenceResults)
			}
			var mapkey string
			var mapvalue *InferenceResults
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInferenceSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInferenceSvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInferenceSvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &InferenceResults{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInferenceSvc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthInferenceSvc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ContainerInferenceResults[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInferenceSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InferenceResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInferenceSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferenceResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferenceResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceResults = append(m.InferenceResults, &InferenceResult{})
			if err := m.InferenceResults[len(m.InferenceResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInferenceSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InferenceResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInferenceSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferenceResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferenceResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceType", wireType)
			}
			m.InferenceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InferenceType |= InferenceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Output = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentile", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Percentile = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenericOutput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenericOutput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultFlag", wireType)
			}
			m.ResultFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultFlag |= ResultFlag(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInferenceSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInferenceSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInferenceSvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInferenceSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInferenceSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInferenceSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInferenceSvc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInferenceSvc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInferenceSvc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInferenceSvc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInferenceSvc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInferenceSvc = fmt.Errorf("proto: unexpected end of group")
)
